{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AI Wings AI Wings is an AIoT Drone System for commanding AIoT drone fleets via the 4G/5G network. We integrate ArduPilot with Android phones and endow DIY drones with AI computing power and 4G/5G connectiviy. AI Wings consists of a cloud server (node.js), Web UI (vue.js), onboard App (Android), and VR simulation (Unreal). Users can install our cloud server and create their own Internet of Drones. Our paper \" AI Wings: An AIoT Drone System for Commanding ArduPilot UAVs \" has been published by IEEE Systems Journal. Real World Testing All test videos in the real world can be found here: www.youtube.com/playlist?list=PL3S3ZnDPwJ-MV5H1yTzR0jPp5sz-ptSo3 . AI Wings System Test AED Delivery Test 4G/5G Two-drones Control VR Drone control Getting Started The major steps to create your own AIoT drone fleet are: 1. Build Your own Drones Assemble an ArduPilot-based drone. We recommend Pixhawk AutoPilot 2. Install Onboard App Get an Android phone and install our Android control APP. Refer to our esm-android page Connect APP to your server. (Bind your phone to the server if you are using multi-user server) Attach the phone to the drone and connect it to Pixhawk MCU 3. Setup a Cloud Server Install our cloud server . Read the user's manual of Web UI Check the web UI to see if the drone appears on the map Ready to fly! VR Simulation AI Wings supports Microsoft AirSim, which allows users to simulate drone functtions in VR worlds. The simulation video is shown below. The upper-left window is the VR world and lower-left window is the virtual camera view. The right window is the web UI of AI Wings. Software Development The system architecture is shown as below. This project is under active development and will be updated frequently.","title":"Home"},{"location":"#ai-wings","text":"AI Wings is an AIoT Drone System for commanding AIoT drone fleets via the 4G/5G network. We integrate ArduPilot with Android phones and endow DIY drones with AI computing power and 4G/5G connectiviy. AI Wings consists of a cloud server (node.js), Web UI (vue.js), onboard App (Android), and VR simulation (Unreal). Users can install our cloud server and create their own Internet of Drones. Our paper \" AI Wings: An AIoT Drone System for Commanding ArduPilot UAVs \" has been published by IEEE Systems Journal.","title":"AI Wings"},{"location":"#real-world-testing","text":"All test videos in the real world can be found here: www.youtube.com/playlist?list=PL3S3ZnDPwJ-MV5H1yTzR0jPp5sz-ptSo3 . AI Wings System Test AED Delivery Test 4G/5G Two-drones Control VR Drone control","title":"Real World Testing"},{"location":"#getting-started","text":"The major steps to create your own AIoT drone fleet are:","title":"Getting Started"},{"location":"#1-build-your-own-drones","text":"Assemble an ArduPilot-based drone. We recommend Pixhawk AutoPilot","title":"1. Build Your own Drones"},{"location":"#2-install-onboard-app","text":"Get an Android phone and install our Android control APP. Refer to our esm-android page Connect APP to your server. (Bind your phone to the server if you are using multi-user server) Attach the phone to the drone and connect it to Pixhawk MCU","title":"2. Install Onboard App"},{"location":"#3-setup-a-cloud-server","text":"Install our cloud server . Read the user's manual of Web UI Check the web UI to see if the drone appears on the map Ready to fly!","title":"3. Setup a Cloud Server"},{"location":"#vr-simulation","text":"AI Wings supports Microsoft AirSim, which allows users to simulate drone functtions in VR worlds. The simulation video is shown below. The upper-left window is the VR world and lower-left window is the virtual camera view. The right window is the web UI of AI Wings.","title":"VR Simulation"},{"location":"#software-development","text":"The system architecture is shown as below. This project is under active development and will be updated frequently.","title":"Software Development"},{"location":"onboard_app/","text":"AI Wings Android APP for ArduPilot This is the embedded drone control software of AI Wings, which is based on Android. The APP connects to the drone cloud via internet and communicates with ArduPilot (Pixhawk) using MAVLINK protocol. It also includes WebRTC for video streamining. Test APP with ArduPilot software simulator Build ArduPilot SITL How to use MAVLink Command Usage DEMO Video Reference Build ArduPilot SITL If you use Linux pls skip this step , Install WSL (Win10 Subsystem). Follow https://ardupilot.org/dev/docs/building-setup-linux.html#building-setup-linux to set up the SITL environment. Follow https://github.com/ArduPilot/ardupilot/blob/master/BUILD.md to build the SITL source code. I use ./waf configure --board sitl If you use Linux pls skip this step , Download https://sourceforge.net/projects/vcxsrv/ to visualize the Linux windows. Input the command on WSL terminal to run SITL. Input command to see how to use the exist parameters. Open Mission Planner or QGroundControl to control and monitor the virtual drone. How to use Select \"USB\" option and connect to Pixhawk via USB or select \"TCP\" and connect to SITL via networks. If successful, \"Pixhawk Status\" will be displayed \"Connected...\" . The \"RABBITMQ\" button is used to connecnt to the pre-built RabbitMQ broker. If successful, \"RabbitMQ Status\" will be displayed \"Connected...\" . The \"WEBRTC\" button is used to establish PeerConnection of WebRTC with the back-end control webpage Reference \u2605 If you want to use USBCamera rather than Android Phone's built-in Camera. You can change the boolean value from MainActivity.java . ```java=0 boolean isUsingUSBCamera = true; \u2605 If you want to modify the IP & port of ArduPilot SITL. You can change the code from ```MAVLinkConnection.java```. ```java=0 socket = new Socket(\"192.168.2.230\", 5762); \u2605 You can change the RabbitMQ IP & port and user name & pwd from RabbitMQ.java . ```java=0 ConnectionFactory factory = new ConnectionFactory(); factory.setHost(\"aiotlab-drone-cloud.ga\"); factory.setPort(5672); factory.setUsername(\"aiotlab\"); factory.setPassword(\"aiotlab208\"); ## *<a id=\"C\">MAVLink Command Usage</a>* ### :memo: Control Drone ### \u2605 Arm & Disarm #### Bulid a **COMMAND_LONG (#76)** Message and use **MAV_CMD_COMPONENT_ARM_DISARM (400)** command. ```java=0 CommandLong cmd = new CommandLong.Builder().command(MavCmd.MAV_CMD_COMPONENT_ARM_DISARM).param1(is_armed).param2(0).build(); connection.send1(255,0, cmd); | is_armed | Status | | ---------| -------| | 0 | DISARM | | 1 | ARM | \u2605 TakeOff Bulid a COMMAND_LONG (#76) Message and use MAV_CMD_NAV_TAKEOFF (22) command. ```java=0 CommandLong cmd = new CommandLong.Builder().command(MavCmd.MAV_CMD_NAV_TAKEOFF).param1(15).param2(0).param3(0).param4(0).param5(0).param6(0).param7(takeoff_alt).build(); connection.send1(255,0, cmd); ### \u2605 Set Flight Mode #### Bulid a **COMMAND_LONG (#76)** Message and use **MavCmd.MAV_CMD_DO_SET_MODE (176)** command. ```java=0 CommandLong cmd = new CommandLong.Builder().command(MavCmd.MAV_CMD_DO_SET_MODE).param1(1).param2(CustomMode).build(); connection.send1(255, 0, cmd); | CustomMode | FlightMode | | ---------- | -----------| | 0 | STABILIZE | | 1 | ACRO | | 2 | ALT_HOLD | | 3 | AUTO | | 4 | GUIDED | | 5 | LOITER | | 6 | RTL | | 7 | CIRCLE | | 9 | LAND | \u2605 Change Flight Speed Bulid a COMMAND_LONG (#76) Message and use MAV_CMD_DO_CHANGE_SPEED (178) command. ```java=0 CommandLong cmd = new CommandLong.Builder().command(MavCmd.MAV_CMD_DO_CHANGE_SPEED).param1(0).param2(speed).param3(-1).param4(0).build(); connection.send1(255,0, cmd); ### \u2605 Change Flight Yaw #### Bulid a **COMMAND_LONG (#76)** Message and use **MAV_CMD_CONDITION_YAW (115)** command. ```java=0 CommandLong cmd = new CommandLong.Builder().command(MavCmd.MAV_CMD_CONDITION_YAW).param1(angle).param2(1).param3(-1).build(); connection.send1(255, 0, cmd); \u2605 Control Servo Bulid a COMMAND_LONG (#76) Message and use MAV_CMD_DO_SET_SERVO (183) command. ```java=0 CommandLong cmd = new CommandLong.Builder().command(MavCmd.MAV_CMD_DO_SET_SERVO).param1(pin).param2(PWM).build(); connection.send1(255,0, cmd); ### \u2605 Go to #### Bulid a **MISSION_ITEM (#39)** Message and use **MAV_CMD_NAV_WAYPOINT (16)** command. ```java=0 MissionItem mission = new MissionItem.Builder().command(MavCmd.MAV_CMD_NAV_WAYPOINT).targetSystem(0).targetComponent(0).seq(0).current(2).autocontinue(0).frame(MavFrame.MAV_FRAME_GLOBAL_RELATIVE_ALT).x(lat).y(lng).z(alt).build(); connection.send1(255,0, mission); :memo: Receive Flight Message \u2605 Bulid a COMMAND_LONG (#76) Message and use MAV_CMD_SET_MESSAGE_INTERVAL (511) command to listen the message you want and set the transmission interval. ```java=0 //MAVLINK_MSG_ID_GLOBAL_POSITION_INT 33 CommandLong STATUS_Position = new CommandLong.Builder().command(MavCmd.MAV_CMD_SET_MESSAGE_INTERVAL).param1(33).param2(1000000).param7(0).build(); connection.send1(255, 0, STATUS_Position); //MAVLINK_MSG_ID_BATTERY_STATUS 147 CommandLong STATUS_Battery = new CommandLong.Builder().command(MavCmd.MAV_CMD_SET_MESSAGE_INTERVAL).param1(147).param2(1000000).param7(0).build(); connection.send1(255, 0, STATUS_Battery); //MAVLINK_MSG_ID_VFR_HUD 74 CommandLong STATUS_Speed = new CommandLong.Builder().command(MavCmd.MAV_CMD_SET_MESSAGE_INTERVAL).param1(74).param2(1000000).param7(0).build(); connection.send1(255, 0, STATUS_Speed); //MAVLINK_MSG_ID_SYS_STATUS 1 CommandLong STATUS_System = new CommandLong.Builder().command(MavCmd.MAV_CMD_SET_MESSAGE_INTERVAL).param1(1).param2(1000000).param7(0).build(); connection.send1(255, 0, STATUS_System); //MAVLINK_MSG_ID_ATTITUDE 30 CommandLong STATUS_Attitude = new CommandLong.Builder().command(MavCmd.MAV_CMD_SET_MESSAGE_INTERVAL).param1(30).param2(1000000).param7(0).build(); connection.send1(255, 0, STATUS_Attitude); //MAVLINK_MSG_ID_GPS_RAW_INT 24 CommandLong STATUS_gps = new CommandLong.Builder().command(MavCmd.MAV_CMD_SET_MESSAGE_INTERVAL).param1(24).param2(1000000).param7(0).build(); connection.send1(255, 0, STATUS_gps); | msg | msg_id | Link | | ------------------- | ------ | -------------------- | | HEARTBEAT | 0 | [:link:][HEARTBEAT] | | GLOBAL_POSITION_INT | 33 | [:link:][POSITION] | | VFR_HUD | 74 | [:link:][VFR_HUD] | | SYS_STATUS | 1 | [:link:][SYS_STATUS] | | ATTITUDE | 30 | [:link:][ATTITUDE] | | GPS_RAW_INT | 24 | [:link:][GPS_RAW_INT]| [HEARTBEAT]: https://mavlink.io/en/messages/common.html#HEARTBEAT [POSITION]: https://mavlink.io/en/messages/common.html#GLOBAL_POSITION_INT [VFR_HUD]: https://mavlink.io/en/messages/common.html#VFR_HUD [SYS_STATUS]: https://mavlink.io/en/messages/common.html#SYS_STATUS [ATTITUDE]: https://mavlink.io/en/messages/common.html#ATTITUDE [GPS_RAW_INT]: https://mavlink.io/en/messages/common.html#GPS_RAW_INT \u2605 You can receive and handle drone's message from ```Drone_Message.java```. Take ***GLOBAL_POSITION_INT ( #33 )*** as an example. ```java=0 // GLOBAL_POSITION_INT ( #33 ) else if(message.getPayload() instanceof GlobalPositionInt){ MavlinkMessage<GlobalPositionInt> positionMessage = (MavlinkMessage<GlobalPositionInt>)message; String payload = \"\" + positionMessage.getPayload(); String[] payload_GlobalPositionInt = payload.replaceAll(\"[^\\\\d-.,E]\", \"\").split(\",\"); String lat_ = payload_GlobalPositionInt[1]; String lng_ = payload_GlobalPositionInt[2]; String alt_ = payload_GlobalPositionInt[3]; String relative_alt_ = payload_GlobalPositionInt[4]; String heading_ = payload_GlobalPositionInt[8]; try{ lat = String.valueOf(Double.parseDouble(lat_) / 10000000); lng = String.valueOf(Double.parseDouble(lng_) / 10000000); alt = String.valueOf(Double.parseDouble(alt_) / 1000); relative_alt = String.valueOf(Double.parseDouble(relative_alt_) / 1000); heading = String.valueOf(Double.parseDouble(heading_) / 100); }catch(NumberFormatException e){ e.printStackTrace(); } Log.i(\"Drone_Message\", \"GLOBAL_POSITION_INT: \" + lat + \" \" + lng + \" \" + alt + \" \" + relative_alt + \" \" + heading); } :memo: Custom Drone Message json=0 { \"type\": \"message\", \"drone_info\": { \"timestamp\": \"2020-12-23 22:43:01\", \"drone_id\" : \"c756023fc7039ee5\" \"location\": { \"lat\": \"25.0430116\", \"lng\": \"121.536214\", \"alt\": \"13.04\", \"relative_alt\": \"3.003\", \"heading\": \"95.42\" }, \"battery\": { \"voltage\": \"12.587\", \"current\": \"28.16\", \"percentage\": \"0\" }, \"speed\": { \"air_speed\": \"0.01\", \"gnd_speed\": \"0.10\" }, \"attitude\": { \"roll\": \"-0.38\", \"pitch\": \"-0.40\", \"yaw\": \"95.42\" }, \"gps_status\": { \"fix_type\": \"GPS_FIX_TYPE_RTK_FIXED\", \"hpop\": \"1.21\", \"vdop\": \"2.00\", \"cog\": \"22054\", \"gps_count\": \"10\" }, \"heartbeat\": { \"mav_type\": \"MAV_TYPE_QUADROTOR\", \"mav_autopilot\": \"MAV_AUTOPILOT_ARDUPILOTMEGA\", \"flight_mode\": \"GUIDED\", \"system_status\": \"MAV_STATE_ACTIVE\", \"is_armed\": \"1\" } } } :pushpin: location Message from GLOBAL_POSITION_INT (#33) Message location description lat Latitude lng Longitude alt Altitude (MSL) relative_alt Altitude above ground heading Vehicle heading (0~360 degrees) :pushpin: battery Message from SYS_STATUS (#1) Message battery description voltage Battery voltage current Battery current percentage Battery energy remaining :pushpin: speed Message from VFR_HUD (#74) Message speed description airspeed Current air speed groundspeed Current ground speed :pushpin: attitude Message from ATTITUDE (#30) Message attitude description row Roll angle (-pi..+pi) pitch Pitch angle (-pi..+pi) yaw Yaw angle (-pi..+pi) :pushpin: gps_status Message from GPS_RAW_INT (#24) Message gps_status description fix_type GPS fix type hpop GPS HDOP horizontal dilution of position vdop GPS VDOP vertical dilution of position cog Course over ground (0.0..359.99 degrees) gps_count Number of satellites visible :pushpin: heartbeat Message from HEARTBEAT (#0) Message heartbeat description mav_type Vehicle or component type mav_autopilot Autopilot type / class flight_mode Current Flight mode system_status System status flag is_armed Whether the drone is armed (0 : Disarmed 1 : Armed) DEMO video https://youtu.be/Q5ktT4_TEg4 Reference https://github.com/dronefleet/mavlink https://github.com/felHR85/UsbSerial","title":"Onboard App"},{"location":"onboard_app/#ai-wings-android-app-for-ardupilot","text":"This is the embedded drone control software of AI Wings, which is based on Android. The APP connects to the drone cloud via internet and communicates with ArduPilot (Pixhawk) using MAVLINK protocol. It also includes WebRTC for video streamining.","title":"AI Wings Android APP for ArduPilot"},{"location":"onboard_app/#test-app-with-ardupilot-software-simulator","text":"Build ArduPilot SITL How to use MAVLink Command Usage DEMO Video Reference","title":"Test APP with ArduPilot software simulator"},{"location":"onboard_app/#build-ardupilot-sitl","text":"If you use Linux pls skip this step , Install WSL (Win10 Subsystem). Follow https://ardupilot.org/dev/docs/building-setup-linux.html#building-setup-linux to set up the SITL environment. Follow https://github.com/ArduPilot/ardupilot/blob/master/BUILD.md to build the SITL source code. I use ./waf configure --board sitl If you use Linux pls skip this step , Download https://sourceforge.net/projects/vcxsrv/ to visualize the Linux windows. Input the command on WSL terminal to run SITL. Input command to see how to use the exist parameters. Open Mission Planner or QGroundControl to control and monitor the virtual drone.","title":"Build ArduPilot SITL"},{"location":"onboard_app/#how-to-use","text":"Select \"USB\" option and connect to Pixhawk via USB or select \"TCP\" and connect to SITL via networks. If successful, \"Pixhawk Status\" will be displayed \"Connected...\" . The \"RABBITMQ\" button is used to connecnt to the pre-built RabbitMQ broker. If successful, \"RabbitMQ Status\" will be displayed \"Connected...\" . The \"WEBRTC\" button is used to establish PeerConnection of WebRTC with the back-end control webpage","title":"How to use"},{"location":"onboard_app/#reference","text":"\u2605 If you want to use USBCamera rather than Android Phone's built-in Camera. You can change the boolean value from MainActivity.java . ```java=0 boolean isUsingUSBCamera = true; \u2605 If you want to modify the IP & port of ArduPilot SITL. You can change the code from ```MAVLinkConnection.java```. ```java=0 socket = new Socket(\"192.168.2.230\", 5762); \u2605 You can change the RabbitMQ IP & port and user name & pwd from RabbitMQ.java . ```java=0 ConnectionFactory factory = new ConnectionFactory(); factory.setHost(\"aiotlab-drone-cloud.ga\"); factory.setPort(5672); factory.setUsername(\"aiotlab\"); factory.setPassword(\"aiotlab208\"); ## *<a id=\"C\">MAVLink Command Usage</a>* ### :memo: Control Drone ### \u2605 Arm & Disarm #### Bulid a **COMMAND_LONG (#76)** Message and use **MAV_CMD_COMPONENT_ARM_DISARM (400)** command. ```java=0 CommandLong cmd = new CommandLong.Builder().command(MavCmd.MAV_CMD_COMPONENT_ARM_DISARM).param1(is_armed).param2(0).build(); connection.send1(255,0, cmd); | is_armed | Status | | ---------| -------| | 0 | DISARM | | 1 | ARM |","title":"Reference"},{"location":"onboard_app/#takeoff","text":"","title":"\u2605 TakeOff"},{"location":"onboard_app/#bulid-a-command_long-76-message-and-use-mav_cmd_nav_takeoff-22-command","text":"```java=0 CommandLong cmd = new CommandLong.Builder().command(MavCmd.MAV_CMD_NAV_TAKEOFF).param1(15).param2(0).param3(0).param4(0).param5(0).param6(0).param7(takeoff_alt).build(); connection.send1(255,0, cmd); ### \u2605 Set Flight Mode #### Bulid a **COMMAND_LONG (#76)** Message and use **MavCmd.MAV_CMD_DO_SET_MODE (176)** command. ```java=0 CommandLong cmd = new CommandLong.Builder().command(MavCmd.MAV_CMD_DO_SET_MODE).param1(1).param2(CustomMode).build(); connection.send1(255, 0, cmd); | CustomMode | FlightMode | | ---------- | -----------| | 0 | STABILIZE | | 1 | ACRO | | 2 | ALT_HOLD | | 3 | AUTO | | 4 | GUIDED | | 5 | LOITER | | 6 | RTL | | 7 | CIRCLE | | 9 | LAND |","title":"Bulid a COMMAND_LONG (#76) Message and use MAV_CMD_NAV_TAKEOFF (22) command."},{"location":"onboard_app/#change-flight-speed","text":"","title":"\u2605 Change Flight Speed"},{"location":"onboard_app/#bulid-a-command_long-76-message-and-use-mav_cmd_do_change_speed-178-command","text":"```java=0 CommandLong cmd = new CommandLong.Builder().command(MavCmd.MAV_CMD_DO_CHANGE_SPEED).param1(0).param2(speed).param3(-1).param4(0).build(); connection.send1(255,0, cmd); ### \u2605 Change Flight Yaw #### Bulid a **COMMAND_LONG (#76)** Message and use **MAV_CMD_CONDITION_YAW (115)** command. ```java=0 CommandLong cmd = new CommandLong.Builder().command(MavCmd.MAV_CMD_CONDITION_YAW).param1(angle).param2(1).param3(-1).build(); connection.send1(255, 0, cmd);","title":"Bulid a COMMAND_LONG (#76) Message and use MAV_CMD_DO_CHANGE_SPEED (178) command."},{"location":"onboard_app/#control-servo","text":"","title":"\u2605 Control Servo"},{"location":"onboard_app/#bulid-a-command_long-76-message-and-use-mav_cmd_do_set_servo-183-command","text":"```java=0 CommandLong cmd = new CommandLong.Builder().command(MavCmd.MAV_CMD_DO_SET_SERVO).param1(pin).param2(PWM).build(); connection.send1(255,0, cmd); ### \u2605 Go to #### Bulid a **MISSION_ITEM (#39)** Message and use **MAV_CMD_NAV_WAYPOINT (16)** command. ```java=0 MissionItem mission = new MissionItem.Builder().command(MavCmd.MAV_CMD_NAV_WAYPOINT).targetSystem(0).targetComponent(0).seq(0).current(2).autocontinue(0).frame(MavFrame.MAV_FRAME_GLOBAL_RELATIVE_ALT).x(lat).y(lng).z(alt).build(); connection.send1(255,0, mission);","title":"Bulid a COMMAND_LONG (#76) Message and use MAV_CMD_DO_SET_SERVO (183) command."},{"location":"onboard_app/#memo-receive-flight-message","text":"\u2605 Bulid a COMMAND_LONG (#76) Message and use MAV_CMD_SET_MESSAGE_INTERVAL (511) command to listen the message you want and set the transmission interval. ```java=0 //MAVLINK_MSG_ID_GLOBAL_POSITION_INT 33 CommandLong STATUS_Position = new CommandLong.Builder().command(MavCmd.MAV_CMD_SET_MESSAGE_INTERVAL).param1(33).param2(1000000).param7(0).build(); connection.send1(255, 0, STATUS_Position); //MAVLINK_MSG_ID_BATTERY_STATUS 147 CommandLong STATUS_Battery = new CommandLong.Builder().command(MavCmd.MAV_CMD_SET_MESSAGE_INTERVAL).param1(147).param2(1000000).param7(0).build(); connection.send1(255, 0, STATUS_Battery); //MAVLINK_MSG_ID_VFR_HUD 74 CommandLong STATUS_Speed = new CommandLong.Builder().command(MavCmd.MAV_CMD_SET_MESSAGE_INTERVAL).param1(74).param2(1000000).param7(0).build(); connection.send1(255, 0, STATUS_Speed); //MAVLINK_MSG_ID_SYS_STATUS 1 CommandLong STATUS_System = new CommandLong.Builder().command(MavCmd.MAV_CMD_SET_MESSAGE_INTERVAL).param1(1).param2(1000000).param7(0).build(); connection.send1(255, 0, STATUS_System); //MAVLINK_MSG_ID_ATTITUDE 30 CommandLong STATUS_Attitude = new CommandLong.Builder().command(MavCmd.MAV_CMD_SET_MESSAGE_INTERVAL).param1(30).param2(1000000).param7(0).build(); connection.send1(255, 0, STATUS_Attitude); //MAVLINK_MSG_ID_GPS_RAW_INT 24 CommandLong STATUS_gps = new CommandLong.Builder().command(MavCmd.MAV_CMD_SET_MESSAGE_INTERVAL).param1(24).param2(1000000).param7(0).build(); connection.send1(255, 0, STATUS_gps); | msg | msg_id | Link | | ------------------- | ------ | -------------------- | | HEARTBEAT | 0 | [:link:][HEARTBEAT] | | GLOBAL_POSITION_INT | 33 | [:link:][POSITION] | | VFR_HUD | 74 | [:link:][VFR_HUD] | | SYS_STATUS | 1 | [:link:][SYS_STATUS] | | ATTITUDE | 30 | [:link:][ATTITUDE] | | GPS_RAW_INT | 24 | [:link:][GPS_RAW_INT]| [HEARTBEAT]: https://mavlink.io/en/messages/common.html#HEARTBEAT [POSITION]: https://mavlink.io/en/messages/common.html#GLOBAL_POSITION_INT [VFR_HUD]: https://mavlink.io/en/messages/common.html#VFR_HUD [SYS_STATUS]: https://mavlink.io/en/messages/common.html#SYS_STATUS [ATTITUDE]: https://mavlink.io/en/messages/common.html#ATTITUDE [GPS_RAW_INT]: https://mavlink.io/en/messages/common.html#GPS_RAW_INT \u2605 You can receive and handle drone's message from ```Drone_Message.java```. Take ***GLOBAL_POSITION_INT ( #33 )*** as an example. ```java=0 // GLOBAL_POSITION_INT ( #33 ) else if(message.getPayload() instanceof GlobalPositionInt){ MavlinkMessage<GlobalPositionInt> positionMessage = (MavlinkMessage<GlobalPositionInt>)message; String payload = \"\" + positionMessage.getPayload(); String[] payload_GlobalPositionInt = payload.replaceAll(\"[^\\\\d-.,E]\", \"\").split(\",\"); String lat_ = payload_GlobalPositionInt[1]; String lng_ = payload_GlobalPositionInt[2]; String alt_ = payload_GlobalPositionInt[3]; String relative_alt_ = payload_GlobalPositionInt[4]; String heading_ = payload_GlobalPositionInt[8]; try{ lat = String.valueOf(Double.parseDouble(lat_) / 10000000); lng = String.valueOf(Double.parseDouble(lng_) / 10000000); alt = String.valueOf(Double.parseDouble(alt_) / 1000); relative_alt = String.valueOf(Double.parseDouble(relative_alt_) / 1000); heading = String.valueOf(Double.parseDouble(heading_) / 100); }catch(NumberFormatException e){ e.printStackTrace(); } Log.i(\"Drone_Message\", \"GLOBAL_POSITION_INT: \" + lat + \" \" + lng + \" \" + alt + \" \" + relative_alt + \" \" + heading); }","title":":memo: Receive  Flight Message"},{"location":"onboard_app/#memo-custom-drone-message","text":"json=0 { \"type\": \"message\", \"drone_info\": { \"timestamp\": \"2020-12-23 22:43:01\", \"drone_id\" : \"c756023fc7039ee5\" \"location\": { \"lat\": \"25.0430116\", \"lng\": \"121.536214\", \"alt\": \"13.04\", \"relative_alt\": \"3.003\", \"heading\": \"95.42\" }, \"battery\": { \"voltage\": \"12.587\", \"current\": \"28.16\", \"percentage\": \"0\" }, \"speed\": { \"air_speed\": \"0.01\", \"gnd_speed\": \"0.10\" }, \"attitude\": { \"roll\": \"-0.38\", \"pitch\": \"-0.40\", \"yaw\": \"95.42\" }, \"gps_status\": { \"fix_type\": \"GPS_FIX_TYPE_RTK_FIXED\", \"hpop\": \"1.21\", \"vdop\": \"2.00\", \"cog\": \"22054\", \"gps_count\": \"10\" }, \"heartbeat\": { \"mav_type\": \"MAV_TYPE_QUADROTOR\", \"mav_autopilot\": \"MAV_AUTOPILOT_ARDUPILOTMEGA\", \"flight_mode\": \"GUIDED\", \"system_status\": \"MAV_STATE_ACTIVE\", \"is_armed\": \"1\" } } }","title":":memo: Custom Drone Message"},{"location":"onboard_app/#pushpin-location-message-from-global_position_int-33-message","text":"location description lat Latitude lng Longitude alt Altitude (MSL) relative_alt Altitude above ground heading Vehicle heading (0~360 degrees)","title":":pushpin: location Message from GLOBAL_POSITION_INT (#33) Message"},{"location":"onboard_app/#pushpin-battery-message-from-sys_status-1-message","text":"battery description voltage Battery voltage current Battery current percentage Battery energy remaining","title":":pushpin: battery Message from SYS_STATUS (#1) Message"},{"location":"onboard_app/#pushpin-speed-message-from-vfr_hud-74-message","text":"speed description airspeed Current air speed groundspeed Current ground speed","title":":pushpin: speed Message from VFR_HUD (#74) Message"},{"location":"onboard_app/#pushpin-attitude-message-from-attitude-30-message","text":"attitude description row Roll angle (-pi..+pi) pitch Pitch angle (-pi..+pi) yaw Yaw angle (-pi..+pi)","title":":pushpin: attitude Message from ATTITUDE (#30) Message"},{"location":"onboard_app/#pushpin-gps_status-message-from-gps_raw_int-24-message","text":"gps_status description fix_type GPS fix type hpop GPS HDOP horizontal dilution of position vdop GPS VDOP vertical dilution of position cog Course over ground (0.0..359.99 degrees) gps_count Number of satellites visible","title":":pushpin: gps_status Message from GPS_RAW_INT (#24) Message"},{"location":"onboard_app/#pushpin-heartbeat-message-from-heartbeat-0-message","text":"heartbeat description mav_type Vehicle or component type mav_autopilot Autopilot type / class flight_mode Current Flight mode system_status System status flag is_armed Whether the drone is armed (0 : Disarmed 1 : Armed)","title":":pushpin: heartbeat Message from HEARTBEAT (#0) Message"},{"location":"onboard_app/#demo-video","text":"https://youtu.be/Q5ktT4_TEg4","title":"DEMO video"},{"location":"onboard_app/#reference_1","text":"https://github.com/dronefleet/mavlink https://github.com/felHR85/UsbSerial","title":"Reference"},{"location":"server/","text":"Backend Server of Drone Cloud Platform This is the backend API server of Drone Cloud Platform , used for handle drone communication between drone's android app and the drone cloud platform. Project introduction File structure Src - The main source code Entity - Datebase schemas Helpers - Some helper funtions MiddleWares - Intermediate checkpoint services Routes - Restful API routes Services - The main business logic Types - TypeScript type definitions Server.ts - Main entry point Package.json - The dependency list Dockerfile - For creating docker container Docker-compose - For creating multi-containers/services environment .env - Environment variables Production Cloud Infrastructure Infra as a Service(IaaS) Google Coompute Engine (Ubuntu 20.04) Platform as a Service (PaaS) Cloud SQL (MySQL) Container Orchestration Platform K3S (light weight kubernetes) Message Broker RabbitMQ AMQP server Gihub Action CI/CD pipeline Multi-drone Simulation Please start the simulator one by one! docker run -p 5671:5672 -it --name sitl_1 waiting33118/ardupilot-sitl # 1st docker run -p 5672:5672 -it --name sitl_2 waiting33118/ardupilot-sitl # 2nd docker run -p 5673:5672 -it --name sitl_3 waiting33118/ardupilot-sitl # 3rd After enter the terminal, execute the script ./start Experiment Results Control drone by platform service Pilot remotely control Project Setup Prerequisites MySQL server ( Install locally / Docker Image ) RabbitMQ server ( Install locally / Docker Image ) Recommend to install locally for more stable Install dependencies npm install Config Environment Variables Copy env example file and rename to .env cp .env.example .env Fill in credentials FRONTEND_URL=http://localhost:8080 BACKEND_SERVICE_SERVICE_PORT=3080 RABBITMQ_SERVICE_SERVICE_HOST=127.0.0.1 RABBITMQ_SERVICE_SERVICE_PORT=5672 RABBITMQ_SERVICE_USER=user (replace by your username) RABBITMQ_SERVICE_PASSWORD=rabbitmq (replace by your password) MYSQL_SERVICE_SERVICE_HOST=127.0.0.1 MYSQL_SERVICE_SERVICE_PORT=3306 MYSQL_SERVICE_USER=root (replace by your username) MYSQL_SERVICE_PASSWORD=password (replace by your password) JWT_TOKEN_SECRET=littleSecret Start The Server npm run dev The server will now run on http://localhost:3080 Build project npm run build Drone Cloud System Environment (Optional) Prerequisite Node.js >=v14.18.1 Docker Docker-compose FrontEnd git clone https://github.com/waiting33118/drone-cloud-platform3.0 Please read the README.md section to start the frontend localhost server Backend API server, RabbitMQ broker and Drone Simulator Edit ENV variables in .docker.env file Startup System # attach mode docker-compose up # detached mode docker-compose up -d # follow logs docker-compose logs -f # stop all containers(remove volumes) docker-compose down -v Initial Drone Simulator Attach the \"sitl\" container docker attach drone-api-server_sitl Run script to build sitl ./start.sh","title":"Server"},{"location":"server/#backend-server-of-drone-cloud-platform","text":"This is the backend API server of Drone Cloud Platform , used for handle drone communication between drone's android app and the drone cloud platform.","title":"Backend Server of Drone Cloud Platform"},{"location":"server/#project-introduction","text":"","title":"Project introduction"},{"location":"server/#file-structure","text":"Src - The main source code Entity - Datebase schemas Helpers - Some helper funtions MiddleWares - Intermediate checkpoint services Routes - Restful API routes Services - The main business logic Types - TypeScript type definitions Server.ts - Main entry point Package.json - The dependency list Dockerfile - For creating docker container Docker-compose - For creating multi-containers/services environment .env - Environment variables","title":"File structure"},{"location":"server/#production-cloud-infrastructure","text":"Infra as a Service(IaaS) Google Coompute Engine (Ubuntu 20.04) Platform as a Service (PaaS) Cloud SQL (MySQL) Container Orchestration Platform K3S (light weight kubernetes) Message Broker RabbitMQ AMQP server","title":"Production Cloud Infrastructure"},{"location":"server/#gihub-action-cicd-pipeline","text":"","title":"Gihub Action CI/CD pipeline"},{"location":"server/#multi-drone-simulation","text":"Please start the simulator one by one! docker run -p 5671:5672 -it --name sitl_1 waiting33118/ardupilot-sitl # 1st docker run -p 5672:5672 -it --name sitl_2 waiting33118/ardupilot-sitl # 2nd docker run -p 5673:5672 -it --name sitl_3 waiting33118/ardupilot-sitl # 3rd After enter the terminal, execute the script ./start","title":"Multi-drone Simulation"},{"location":"server/#experiment-results","text":"Control drone by platform service Pilot remotely control","title":"Experiment Results"},{"location":"server/#project-setup","text":"","title":"Project Setup"},{"location":"server/#prerequisites","text":"MySQL server ( Install locally / Docker Image ) RabbitMQ server ( Install locally / Docker Image ) Recommend to install locally for more stable","title":"Prerequisites"},{"location":"server/#install-dependencies","text":"npm install","title":"Install dependencies"},{"location":"server/#config-environment-variables","text":"Copy env example file and rename to .env cp .env.example .env Fill in credentials FRONTEND_URL=http://localhost:8080 BACKEND_SERVICE_SERVICE_PORT=3080 RABBITMQ_SERVICE_SERVICE_HOST=127.0.0.1 RABBITMQ_SERVICE_SERVICE_PORT=5672 RABBITMQ_SERVICE_USER=user (replace by your username) RABBITMQ_SERVICE_PASSWORD=rabbitmq (replace by your password) MYSQL_SERVICE_SERVICE_HOST=127.0.0.1 MYSQL_SERVICE_SERVICE_PORT=3306 MYSQL_SERVICE_USER=root (replace by your username) MYSQL_SERVICE_PASSWORD=password (replace by your password) JWT_TOKEN_SECRET=littleSecret","title":"Config Environment Variables"},{"location":"server/#start-the-server","text":"npm run dev The server will now run on http://localhost:3080","title":"Start The Server"},{"location":"server/#build-project","text":"npm run build","title":"Build project"},{"location":"server/#drone-cloud-system-environment-optional","text":"","title":"Drone Cloud System Environment (Optional)"},{"location":"server/#prerequisite","text":"Node.js >=v14.18.1 Docker Docker-compose","title":"Prerequisite"},{"location":"server/#frontend","text":"git clone https://github.com/waiting33118/drone-cloud-platform3.0 Please read the README.md section to start the frontend localhost server","title":"FrontEnd"},{"location":"server/#backend-api-server-rabbitmq-broker-and-drone-simulator","text":"Edit ENV variables in .docker.env file","title":"Backend API server, RabbitMQ broker and Drone Simulator"},{"location":"server/#startup-system","text":"# attach mode docker-compose up # detached mode docker-compose up -d # follow logs docker-compose logs -f # stop all containers(remove volumes) docker-compose down -v","title":"Startup System"},{"location":"server/#initial-drone-simulator","text":"Attach the \"sitl\" container docker attach drone-api-server_sitl Run script to build sitl ./start.sh","title":"Initial Drone Simulator"},{"location":"web_ui/","text":"Drone Cloud Platform | Drone As A Service | DaaS Drone Cloud Platfrom is a drone ground control system (GCS) build by Vue.js and it provide user to control there ardupilot-based drone through 4G network. Service Introduction We propose an eco-system of the UAV, the system including frontend service, backend API server, multi drone simulation environment, topic-subscribe broker. The pilot commanding the drone by controlling the fronend interface, the command will first forward to the backend by using Websocket, then the AMQP client in the backend server will send the command to the AMQP broker, after recieved the payload, it would follow the routing rules and forward the command to the target drone. Views/Components Design Global State Management (Vuex) Experiment Captures Main control interface Drone that flight by platform service SITL infrastructure to simulate multi-drones Multi drones observation Drone's orbit history records Object detection (Tensorflow.js) Project Setup 1. Prerequisite Node.js LTS runtime (Install by NVM or official Website) Backend API server (Please setup drone-api-server first!!) 2. Install Dependencies npm install 3. Config Environment Variables Copy env example file and rename to .env.local cp .env.local.example .env.local Fill in credentials VUE_APP_MAPBOX_TOKEN=your mapbox token VUE_APP_BACKEND_SERVICE_PROTOCOL=http VUE_APP_BACKEND_SERVICE_SERVICE_HOST=localhost VUE_APP_BACKEND_SERVICE_SERVICE_PORT=3030 Generate mapbox token(free, no need credit card) in mapbox offical website 4. Run project (Development mode) npm run serve Frontend service will now run on http://localhost:8080 5. Build project (Production mode) npm run build 6. Deployment Initial firebase configs firebase init Deploy to firebase hosting firebase deploy --only hosting How to start to use the drone service? 1. Download the App Download the latest apk 2. Open the App to get the Drone ID 3. Sign up the service account Drone Cloud Platform Sign up Enter your Drone ID that shows on your App when register account","title":"Web UI"},{"location":"web_ui/#drone-cloud-platform-drone-as-a-service-daas","text":"Drone Cloud Platfrom is a drone ground control system (GCS) build by Vue.js and it provide user to control there ardupilot-based drone through 4G network.","title":"Drone Cloud Platform | Drone As A Service | DaaS"},{"location":"web_ui/#service-introduction","text":"We propose an eco-system of the UAV, the system including frontend service, backend API server, multi drone simulation environment, topic-subscribe broker. The pilot commanding the drone by controlling the fronend interface, the command will first forward to the backend by using Websocket, then the AMQP client in the backend server will send the command to the AMQP broker, after recieved the payload, it would follow the routing rules and forward the command to the target drone. Views/Components Design Global State Management (Vuex)","title":"Service Introduction"},{"location":"web_ui/#experiment-captures","text":"Main control interface Drone that flight by platform service SITL infrastructure to simulate multi-drones Multi drones observation Drone's orbit history records Object detection (Tensorflow.js)","title":"Experiment Captures"},{"location":"web_ui/#project-setup","text":"","title":"Project Setup"},{"location":"web_ui/#1-prerequisite","text":"Node.js LTS runtime (Install by NVM or official Website) Backend API server (Please setup drone-api-server first!!)","title":"1. Prerequisite"},{"location":"web_ui/#2-install-dependencies","text":"npm install","title":"2. Install Dependencies"},{"location":"web_ui/#3-config-environment-variables","text":"Copy env example file and rename to .env.local cp .env.local.example .env.local Fill in credentials VUE_APP_MAPBOX_TOKEN=your mapbox token VUE_APP_BACKEND_SERVICE_PROTOCOL=http VUE_APP_BACKEND_SERVICE_SERVICE_HOST=localhost VUE_APP_BACKEND_SERVICE_SERVICE_PORT=3030 Generate mapbox token(free, no need credit card) in mapbox offical website","title":"3. Config Environment Variables"},{"location":"web_ui/#4-run-project-development-mode","text":"npm run serve Frontend service will now run on http://localhost:8080","title":"4. Run project (Development mode)"},{"location":"web_ui/#5-build-project-production-mode","text":"npm run build","title":"5. Build project (Production mode)"},{"location":"web_ui/#6-deployment","text":"Initial firebase configs firebase init Deploy to firebase hosting firebase deploy --only hosting","title":"6. Deployment"},{"location":"web_ui/#how-to-start-to-use-the-drone-service","text":"","title":"How to start to use the drone service?"},{"location":"web_ui/#1-download-the-app","text":"Download the latest apk","title":"1. Download the App"},{"location":"web_ui/#2-open-the-app-to-get-the-drone-id","text":"","title":"2. Open the App to get the Drone ID"},{"location":"web_ui/#3-sign-up-the-service-account","text":"Drone Cloud Platform Sign up Enter your Drone ID that shows on your App when register account","title":"3. Sign up the service account"}]}